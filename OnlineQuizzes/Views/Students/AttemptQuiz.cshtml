@model OnlineQuizzes.ViewModels.AttemptQuizViewModel
@{
    ViewBag.Title = "AttemptQuiz";
    Layout = null;
}

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
</head>

    <!-- Modal -->
    <div class="modal show" id="myModal" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" style="text-align:center" id="timer">Remaining Time: @Model.quiz.DurationOfQuiz</h4>
                </div>
                <div class="modal-body">
                    @using (Html.BeginForm("Check", "Students"))
                    {
                        @Html.AntiForgeryToken()

                        <div class="form-horizontal">

                            @for (int i = 0; i < Model.MCQQuestions.Count(); i++)
                            {
                                <label style="display:none">@Html.DisplayFor(modelItem => Model.StudentID))</label>
                                @Html.EditorFor(model => Model.MCQQuestionsAnswers[i].Id, new { htmlAttributes = new { @class = "form-control", @Value = Model.StudentID, @readonly = true, @style = "display:none" } })

                                <label style="display: none">@Html.DisplayFor(modelItem => Model.QuizID))</label>
                                @Html.EditorFor(model => Model.MCQQuestionsAnswers[i].QuizId, new { htmlAttributes = new { @class = "form-control", @Value = Model.QuizID, @readonly = true, @style = "display:none" } })
                                <br />

                                <label style="color:red">@Html.DisplayFor(modelItem => Model.MCQQuestions[i].QuestionID) - @Html.DisplayFor(modelItem => Model.MCQQuestions[i].QuestionText)? (@Html.DisplayFor(modelItem => Model.MCQQuestions[i].GradeOfQuestion))</label>
                                @Html.EditorFor(model => Model.MCQQuestionsAnswers[i].QuestionID, new { htmlAttributes = new { @class = "form-control", @Value = Model.MCQQuestions[i].QuestionID, @readonly = true, @style = "display:none" } })
                                <br />
                                foreach (var answer in Model.MCQAnswers)
                                {
                                    if (answer.QuestionID == Model.MCQQuestions[i].QuestionID)
                                    {

                                        <div class="checkbox">

                                            <label>
                                                @Html.EditorFor(model => Model.MCQQuestionsAnswers[i].Answer, new { htmlAttributes = new { @type = "checkbox", @Value = answer.FirstPossibleAnswer, @readonly = true } })
                                                @Html.DisplayFor(modelItem => answer.FirstPossibleAnswer)
                                            </label>
                                        </div>
                                        <div class="checkbox">
                                            <label>
                                                @Html.EditorFor(model => Model.MCQQuestionsAnswers[i].Answer, new { htmlAttributes = new { @type = "checkbox", @Value = answer.SecondPossibleAnswer, @readonly = true } })
                                                @Html.DisplayFor(modelItem => answer.SecondPossibleAnswer)
                                            </label>
                                        </div>
                                        if (answer.ThirdPossibleAnswer != null)
                                        {
                                            <div class="checkbox">
                                                <label>
                                                    @Html.EditorFor(model => Model.MCQQuestionsAnswers[i].Answer, new { htmlAttributes = new { @type = "checkbox", @Value = answer.ThirdPossibleAnswer, @readonly = true } })
                                                    @Html.DisplayFor(modelItem => answer.ThirdPossibleAnswer)
                                                </label>
                                            </div>
                                        }
                                        if (answer.FourthPossibleAnswer != null)
                                        {
                                            <div class="checkbox">
                                                <label>
                                                    @Html.EditorFor(model => Model.MCQQuestionsAnswers[i].Answer, new { htmlAttributes = new { @type = "checkbox", @Value = answer.FourthPossibleAnswer, @readonly = true } })
                                                    @Html.DisplayFor(modelItem => answer.FourthPossibleAnswer)
                                                </label>
                                            </div>
                                        }
                                    }
                                }
                            }
                            @for (int i = 0; i < Model.FillQuestions.Count(); i++)
                            {
                                var ContinuePreviousCount = Model.MCQQuestions.Count() + 1;
                                <label style="display:none">@Html.DisplayFor(modelItem => Model.StudentID))</label>
                                @Html.EditorFor(model => Model.QuizFillInTheBlankAnswers[i].Id, new { htmlAttributes = new { @class = "form-control", @Value = Model.StudentID, @readonly = true, @style = "display:none" } })

                                <label style="display: none">@Html.DisplayFor(modelItem => Model.QuizID))</label>
                                @Html.EditorFor(model => Model.QuizFillInTheBlankAnswers[i].QuizId, new { htmlAttributes = new { @class = "form-control", @Value = Model.QuizID, @readonly = true, @style = "display:none" } })
                                <br />

                                <br />
                                <label style="color:red">@Html.DisplayFor(modelItem => Model.FillQuestions[i].QuestionID) - @Html.DisplayFor(modelItem => Model.FillQuestions[i].QuestionText)? (@Html.DisplayFor(modelItem => Model.FillQuestions[i].GradeOfQuestion))</label>
                                @Html.EditorFor(model => Model.QuizFillInTheBlankAnswers[i].QuestionID, new { htmlAttributes = new { @class = "form-control", @Value = Model.FillQuestions[i].QuestionID, @readonly = true, @style = "display:none" } })
                                <br />

                                @Html.TextAreaFor(model => Model.QuizFillInTheBlankAnswers[i].Answer, new { cols = 35, @rows = 3 })
                                @*<textarea id="Fill" name="Fill" rows="4" cols="50"></textarea>*@
                            }

                        </div>
                        <div class="modal-footer">
                            <input id="Save" type="submit" value="Submit" class="btn btn-primary" />
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

@*<script>
        $('input[type="checkbox"]').on('change', function () {
            $('input[type="checkbox"]').not(this).prop('checked', false);
        });
    </script>*@
<script type="text/javascript">
    function startTimer(duration, display) {
        var timer = duration, minutes, seconds;
        setInterval(function () {
            minutes = parseInt(timer / 60, 10);
            seconds = parseInt(timer % 60, 10);

            minutes = minutes < 10 ? "0" + minutes : minutes;
            seconds = seconds < 10 ? "0" + seconds : seconds;

            display.textContent = "Remaining Time: "+minutes + ":" + seconds;

            if (--timer <= 0) {
                document.getElementById("Save").click();
            }
        }, 1000);
    }

    window.onload = function () {
        var duration = 60 * @Model.quiz.DurationOfQuiz,
        display = document.querySelector('#timer');
        startTimer(duration, display);
    };

</script>
<script>
    //check for Navigation Timing API support
    if (window.performance) {
        console.info("window.performance works fine on this browser");
    }
    console.info(performance.navigation.type);
    if (performance.navigation.type == performance.navigation.TYPE_RELOAD) {
        document.getElementById("Save").click();
    } else {
        console.info("This page is not reloaded");
    }
</script>
